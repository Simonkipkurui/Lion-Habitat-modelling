##****************************************************************************************
##****************************************************************************************
##*****************************Date: October 2024##***************************************
##******************Resource Selection Funcgtion for Collared Lions##*********************
##*********************************Angama Female Analysis##*******************************
##********************************Year:2024##*********************************************
##**************************Master's Project##********************************************
##********************************: Kasaine Sankan##**************************************

#clear enviroment
rm(list=ls())

##Get and set the working Directory
##getwd()

##Load necessary libraries
library(sf)
library(terra)
library(tidyverse)

# Import lion file with xy locations, homerange polygon and habitat raster map

# csv file with all the lions points (lion dataframe)
ANGaF3.df <-read.csv("C:/Msc_Analyzed_Data/Kasaine's Masters Project/Data/Adult Females_Collar/ANGaF3_42559/ANGaF3_42559_Complete_RSF.csv")

# polygon (Home range polygon)
ANGaF3_HR_Poly <-st_read("C:/Msc_Analyzed_Data/Kasaine's Masters Project/Data/Adult Females_Collar/ANGaF3_42559/ANGaF3_42559.shp")
summary(ANGaF3_HR_Poly)

# raster (Habitat Map from Fem)
Fem_Habitat_Map <-rast("C:/Msc_Analyzed_Data/Kasaine's Masters Project/Data/habitatfinal.tif")

# Transform to sf object and UTM ------------------------------------------

lion.sf <- ANGaF3.df %>%
  st_as_sf(coords = c('Longitude', 'Latitude'),
           crs = 4326) %>% 
  st_transform(32736)

plot(ANGaF3_HR_Poly$geometry)
plot(lion.sf$geometry,add=T)

# Assign random points to 100% MCP (150*nrow lion track rs)

randompoints <- st_sample(ANGaF3_HR_Poly,12260) 
plot(ANGaF3_HR_Poly$geometry)
plot(randompoints)

Random_Points.sf <- randompoints %>% 
  st_as_sf()
# Convert the file to a regular tibble

randomdata <- Random_Points.sf %>%
  mutate(x = st_coordinates(Random_Points.sf)[ ,1],
         y = st_coordinates(Random_Points.sf)[ ,2]) %>%
  as_tibble() %>%
  mutate(case_ = FALSE) %>% 
  mutate(Collar_ID = 42562)

# Convert the lion file to a regular tibble

lion_track <- lion.sf %>%
  mutate(x = st_coordinates(lion.sf)[ ,1],
         y = st_coordinates(lion.sf)[ ,2]) %>%
  as_tibble() %>%
  select(Collar_ID, x, y) %>%
  mutate(case_ = TRUE) 

# Combine lion data and random data and add weights

lion_track_com <- rbind(randomdata, lion_track) %>%
  mutate(w = ifelse(case_ == T,
                    1,
                    5000))

# Extract covariates

lion_rsf <- terra::extract(Fem_Habitat_Map, lion_track_com[, c("x", "y")]) %>%
  mutate(habitat_use = factor(habitatfinal, 
                              levels = c(2,3,5,4,6),
                              labels = c("Water", "Open", "Semi-closed", "Closed", "Agriculture")))

lion_rsf <- cbind(lion_rsf, lion_track_com)

terra::plot(Fem_Habitat_Map) 

m <- glm(case_ ~ habitat_use,
         family = binomial(link = "logit"), 
         weights = w,
         data = lion_rsf)

ggplot(lion_rsf,
       aes(x = habitat_use,
           y = after_stat(prop),
           group = case_,
           colour = case_)) +
  geom_bar(position = "dodge",
           aes(fill = case_))

#Get the summary 

summary(m)

# Filter data for the "Open" habitat and count True and False points
open_habitat_counts <- lion_rsf %>%
  filter(habitat_use == "Open") %>%
  summarise(
    true_count = sum(case_ == 1),    # Count of True cases in Open habitat
    false_count = sum(case_ == 0)    # Count of False cases in Open habitat
  )

# View the result
print(open_habitat_counts)

# Calculate the number of True and False points in each habitat category
true_false_counts <- lion_rsf %>%
  filter(habitat_use %in% c("Water", "Open", "Semi-closed", "Closed", "Agriculture")) %>%
  group_by(habitat_use) %>%
  summarise(
    true_count = sum(case_ == 1),  # Count of True cases (event happened)
    false_count = sum(case_ == 0)  # Count of False cases (event did not happen)
  )

# View the result
print(true_false_counts)

# Calculate percentage differences for True and False points in each habitat category
percentage_differences <- lion_rsf %>%
  # Filter only the habitat categories of interest
  filter(habitat_use %in% c("Water", "Open", "Semi-closed", "Closed", "Agriculture")) %>%
  # Group by habitat category
  group_by(habitat_use) %>%
  summarise(
    total_points = n(),  # Total number of points for each habitat
    true_points = sum(case_ == 1),  # Count of True cases (event happened)
    false_points = sum(case_ == 0),  # Count of False cases (event did not happen)
    true_percentage = (true_points / total_points) * 100,  # Percentage of True points
    false_percentage = (false_points / total_points) * 100, # Percentage of False points
    # Calculate percentage difference between True and False
    percentage_diff_true_vs_false = true_percentage - false_percentage
  ) %>%
  # Calculate percentage difference between the number of points and total points
  mutate(
    true_percentage_total = (true_points / sum(total_points)) * 100,  # True percentage of total points
    false_percentage_total = (false_points / sum(total_points)) * 100, # False percentage of total points
    percentage_diff_total_vs_true = true_percentage_total - (total_points / sum(total_points)) * 100,  # Difference for True points
    percentage_diff_total_vs_false = false_percentage_total - (total_points / sum(total_points)) * 100  # Difference for False points
  )

# View the result
print(percentage_differences)
